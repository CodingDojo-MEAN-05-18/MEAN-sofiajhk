{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Consolas;}
{\colortbl;\red255\green255\blue255;\red27\green31\blue34;}
{\*\expandedcolortbl;;\cssrgb\c14118\c16078\c18039;}
\margl1440\margr1440\vieww10800\viewh17480\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs30 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 1. Create a database called 'my_first_db':\
use my_first_db\
\
2. Create students collection:\
db.createCollection("students")\
\
3. Each document you insert into this collection should have the following format: \
(\{	\
	name: STRING, \
	home_state: STRING, \
	lucky_number: NUMBER, \
	birthday: \{month: NUMBER, day: NUMBER, year: NUMBER\}\
\})\
\
4. Create 5 students with the appropriate info:\
db.students.insert(\{ name: \'93Ashley\'94, home_state : \'93North Carolina\'94, lucky_number: 15, birthday : \{month: 09, day: 16, year: 1994\}\})\
db.students.insert(\{ name: \'93Anthony\'94, home_state : \'93California\'94, lucky_number: 23, birthday : \{month: 10, day: 15, year: 1984\}\})\
db.students.insert(\{ name: \'93Carrie\'94, home_state: \'93Texas\'94, lucky_number: 7, birthday : \{month: 07, day: 10, year: 1991\}\})\
db.students.insert(\{ name: \'93David\'94, home_state: \'93New York\'93, lucky_number: 14, birthday : \{month: 12, day: 01, year: 1988\}\})\
db.students.insert(\{name: \'93Cindy\'94, home_state: \'93Floria\'94, lucky_number: 100, birthday: \{ month: 03, day: 25, year: 1994 \}\})\
\
\
5. Get all students:\
db.students.find().pretty()\
\
6. Retrieve all students who are from California (San Jose Dojo) or Washington (Seattle Dojo):\
db.students.find(\{home_state: "California\'94\}).pretty()\
db.students.find(\{home_state: "Washington"\}).pretty()\
\
7. Get all students whose lucky number is:\
- greater than 3\
db.students.find(\{lucky_number: \{$gt: 3\}\})\
\
- less than or equal to 10:\
db.students.find(\{lucky_number: \{$lte: 10\}\})\
\
- between 1 and 9 (inclusive):\
db.students.find(\{lucky_number: \{$in: [1,2,3,4,5,6,7,8,9]\}\})\
\
8. Add a field to each student collection called 'interests' that is an ARRAY.  It should contain the following entries: \
'coding', 'brunch', 'MongoDB'. Do this in ONE operation.\
db.students.updateMany(\{\}, \{$set:\{interests: ["coding", "brunch", "MongoDB"]\}\})\
\
9. Add some unique interests for each particular student into each of their interest arrays.\
db.students.update(\{ name: \'93Ashley\'94 \}, \{$addToSet: \{interests: \'93swimming\'94\}\})\
db.students.update(\{name: \'93Anthony\'94\}, \{$addToSet: \{interests: \'93golfing\'94\}\})\
db.students.update(\{name: \'93Carrie\'94\}, \{$addToSet: \{interests: \'93volleyball\'94\}\})\
db.students.update(\{name: \'93David\'94\}, \{$addToSet: \{interests: \'93blogging\'94\}\})\
db.students.update(\{name: \'93Cindy\'94\}, \{$addToSet: \{interests: \'93drawing\'94\}\})\
\
10. Add the interest 'taxes' into someone's interest array.\
db.students.update(\{name: \'93Anthony\'94\}, \{$push: \{interests: "taxes"\}\})\
\
11. Remove the 'taxes' interest you just added.\
db.students.update(\{name: \'93Anthony\'94\}, \{$pop: \{interests: 1\}\})\
\
12. Remove all students who are from California (or Washington).\
db.students.remove(\{home_state: "California"\})\
db.students.remove(\{home_state: "Washington"\})\
\
\
13. Remove a student by name. \
db.students.remove(\{name: \'93Cindy\'94\})\
\
14. Remove a student whose lucky number is greater than 5 (JUST ONE)\
db.students.remove(\{lucky_number: \{$gt: 5\}\}, true)\
\
15. Add a field to each student collection called 'number_of_belts' and set it to 0.\
db.students.updateMany(\{\},\{$set: \{number_of_belts: 0\}\})\
\
16. Increment this field by 1 for all students in Washington (Seattle Dojo).\
db.students.updateMany(\{home_state: "Washington"\}, \{$inc: \{number_of_belts: 1\}\})\
\
17. Rename the 'number_of_belts' field to 'belts_earned'\
db.students.updateMany(\{\}, \{$rename: \{"number_of_belts": "belts_earned"\}\})\
\
18. Remove the 'lucky_number' field.\
db.students.updateMany(\{\}, \{$unset: \{lucky_number: ""\}\})\
\
19. Add an 'updated_on' field, and set the value as the current date.\
db.students.updateMany(\{\},\{$currentDate: \{updated_on: true\}\})\
}